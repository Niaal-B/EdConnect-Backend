services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_app
    restart: always
    # ports:
    #   - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - ./.env  
    volumes:
      - ./backend:/app  
      - ./backend/staticfiles:/app/staticfiles 
    
    command: ["daphne", "config.asgi:application", "-b", "0.0.0.0", "-p", "8000"]

  redis:
    image: redis:7.0
    container_name: redis_server
    restart: always
    ports:
      - "6379:6379"

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  nginx:
    image: nginx:latest
    container_name: nginx_server
    restart: always
    ports:
      - "80:80"
      - "443:443"
  
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./backend/staticfiles:/app/staticfiles 
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt:ro

    depends_on:
      - backend

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile

    user: "1000:1000"
    command: ["celery", "-A", "config", "worker", "--loglevel=info", "--uid=0"]    
    depends_on:
      - redis
      - backend
    env_file:
      - ./.env
    volumes:
      - ./backend:/app

volumes:
  postgres_data:
  certbot-etc:
  certbot-var: